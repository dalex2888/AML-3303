import pandas as pd
import polars as pl
import time

# Download a sample dataset (NYC Taxi Trips small sample)

csv_file = "yellow_tripdata_2019-01.csv"

# ------------------ PANDAS ------------------
start = time.time()
df_pd = pd.read_csv(csv_file, nrows=100000)  # Load first 100k rows
# Example operation: filter and compute average fare
result_pd = df_pd[df_pd['passenger_count'] > 2]['total_amount'].mean()

#1. How much revenue is generated by trips for 1, 2, 3, and 4+ passengers?
revenues_vendor = pd.crosstab(df_pd['passenger_count'], df_pd['VendorID'], 
                               values=df_pd['total_amount'], 
                               aggfunc='sum')
print("="*60)
print("1. REVENUE BY PASSENGER COUNT AND VENDOR")
print("="*60)
print(revenues_vendor)
print(f"\nData type: {type(revenues_vendor)}\n")

revenue_passenger = df_pd.groupby('passenger_count')['total_amount'].agg(['sum', 'mean'])
print("-"*60)
print("REVENUE SUMMARY BY PASSENGER COUNT")
print("-"*60)
print(revenue_passenger)
print()

#2. What is the average tip amount and maximum tip for each passenger group?
tips = df_pd.groupby('passenger_count')['tip_amount'].agg(['sum', 'max'])
print("="*60)
print("2. TIP ANALYSIS BY PASSENGER COUNT")
print("="*60)
print(tips)
print()

#3. How many trips occur per passenger group?
trips_passengers = df_pd.groupby('passenger_count').agg({'passenger_count':'count'})
print("="*60)
print("3. TRIP COUNT BY PASSENGER GROUP")
print("="*60)
print(trips_passengers)
print()

end = time.time()
print("="*60)
print("EXECUTION SUMMARY")
print("="*60)
print(f"Result: {result_pd}")
print(f"Execution Time: {end - start:.4f} seconds")
print("="*60)

# ------------------ POLARS ------------------
start = time.time()
df_pl = pl.read_csv(csv_file, n_rows=100000)
# Example operation: filter and compute average fare
result_pl = df_pl.filter(pl.col('passenger_count') > 2).select(pl.col('total_amount').mean())


pl_revenue = df_pl.group_by('passenger_count').agg(pl.col('total_amount').sum())
print(pl_revenue)

end = time.time()
print("Polars result:", result_pl)
print("Polars execution time:", end - start, "seconds")
